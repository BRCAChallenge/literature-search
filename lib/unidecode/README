
				   Unidecode

		     ASCII transliterations of Unicode text


EXAMPLE USE

	from unidecode import unidecode
	print unidecode(u"\u5317\u4EB0")

	# That prints: Bei Jing 


DESCRIPTION

    It often happens that you have non-Roman text data in Unicode, but
    you can't display it -- usually because you're trying to show it
    to a user via an application that doesn't support Unicode, or
    because the fonts you need aren't accessible. You could represent
    the Unicode characters as "???????" or "\15BA\15A0\1610...", but
    that's nearly useless to the user who actually wants to read what
    the text says.

    What Unidecode provides is a function, 'unidecode(...)' that
    takes Unicode data and tries to represent it in ASCII characters 
    (i.e., the universally displayable characters between 0x00 and 0x7F). 
    The representation is almost always an attempt at *transliteration* 
    -- i.e., conveying, in Roman letters, the pronunciation expressed by 
    the text in some other writing system. (See the example above)

    This is a Python port of Text::Unidecode Perl module by 
    Sean M. Burke <sburke@cpan.org>.


REQUIREMENTS

    Nothing except Python itself.


INSTALLATION

    You install Unidecode, as you would install any Python module,
    by running these commands:

	python setup.py install
	python setup.py test


SUPPORT

    Questions, bug reports, useful code bits, and suggestions for
    Unidecode should be sent to tomaz@zemanta.com


AVAILABILITY

    The latest version of Unidecode is available from the GIT
    repository at

	http://code.zemanta.com/tsolc/git/wikiprep

    You can get it by running:

	git clone http://code.zemanta.com/tsolc/git/wikiprep


COPYRIGHT

Character transliteration tables:

Copyright 2001, Sean M. Burke <sburke@cpan.org>, all rights reserved.

Python code:

Copyright 2009, Tomaz Solc <tomaz@zemanta.com>


The programs and documentation in this dist are distributed in the
hope that they will be useful, but without any warranty; without even
the implied warranty of merchantability or fitness for a particular
purpose.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl.
